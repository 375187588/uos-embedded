ARCH		= mips
CHIP		= ELVEES_NVCOM01
MODULES		= runtime stream

# We use memcpy etc. with slightly different args,
# so we need to use no-builtin option to prevent conflict.

ifdef MCS4_HOME
BINDIR		:= $(MCS4_HOME)/ToolsMGCC/bin
else
BINDIR		:= C:/elvees/ToolsMGCC/bin
endif
CROSS_PREFIX ?= mipsel-elf32
CROSS_TOOL   := $(BINDIR)/${CROSS_PREFIX}

SRC_INCLUDES = $(SRC)elf/$(ARCH) $(SRC)elf $(SRC)
INCLUDES	+= $(SRC_INCLUDES) $(OS)/sources

CC		   = $(CROSS_TOOL)-gcc -mips32 -Wall -g
CFLAGS		= $(OPTIMIZE) -DMIPS32 -D$(CHIP) \
		  $(addprefix -I, $(INCLUDES))\
		  -Werror\
		  -EL -mhard-float \
		  -c -fmessage-length=0 \
		  -G0 -mips32 -ffixed-k0 -ffixed-k1 \
		  -mno-check-zero-division \
		  -fno-delayed-branch \
		  -Xassembler --mc24r2 \
		  -fno-builtin -fsigned-char -DRECURSIVE_LOCKS=0

ASFLAGS		= -DMIPS32 -D$(CHIP) \
		  $(addprefix -I, $(INCLUDES))
DEPFLAGS	= -MT $@ -MD -MP -MF .deps/$*.dep
STARTUP		= startup.S
LDFLAGS		= -nostdlib
UOSLIB_NAME = $(subst lib,,$(basename $(notdir $(UOS_LIB)) ) )
LIBS		= ${USE_UOS} -L$(TARGET) -L$(SRC) -L$(UOS_LIB_DIR) -lgcc -l$(UOSLIB_NAME)
LIBS	   += -Wl,-Map="$@.map",--cref,--gc-sections
AR		= $(BINDIR)/mipsel-elf32-ar
SIZE		= $(CROSS_TOOL)-size
OBJDUMP		= $(CROSS_TOOL)-objdump -mmips:isa32 -D
OBJCOPY		= $(CROSS_TOOL)-objcopy
STRIP		= $(CROSS_TOOL)-strip

PROG_OPTS	?= 
PROG	= C:/Projects/NVCOM2/tst4153.wks/mcprog/mcprog.exe $(PROG_OPTS)
